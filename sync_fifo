module sync_fifo #(parameter DEPTH=8, DWIDTH=16)
(
    input                  clk,
    input                  rstn,    // Active low reset
    input                  wr_en,
    input                  rd_en,
    input  [DWIDTH-1:0]    din,
    output reg [DWIDTH-1:0] dout,
    output                 empty,
    output                 full
);

  localparam PTR_WIDTH = $clog2(DEPTH);

  reg [DWIDTH-1:0] fifo [0:DEPTH-1];
  reg [PTR_WIDTH:0] wptr, rptr; // one extra bit for wrap detection

  // WRITE logic
  always @(posedge clk) begin
    if (!rstn) begin
      wptr <= 0;
    end else if (wr_en && !full) begin
      fifo[wptr[PTR_WIDTH-1:0]] <= din;
      wptr <= wptr + 1'b1;
    end
  end

  // READ logic
  always @(posedge clk) begin
    if (!rstn) begin
      rptr <= 0;
      dout <= {DWIDTH{1'b0}};
    end else if (rd_en && !empty) begin
      dout <= fifo[rptr[PTR_WIDTH-1:0]];
      rptr <= rptr + 1'b1;
    end
  end

  // Status flags
  assign empty = (wptr == rptr);
  assign full  = (wptr[PTR_WIDTH]     != rptr[PTR_WIDTH]) &&
                 (wptr[PTR_WIDTH-1:0] == rptr[PTR_WIDTH-1:0]);



endmodule
